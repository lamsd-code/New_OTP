package com.example.demo.api;

import com.example.demo.model.request.TransactionCreateRequest;
import com.example.demo.model.response.ResponseDTO;
import com.example.demo.repository.TransactionRepository;
import com.example.demo.security.utils.SecurityUtils;
import com.example.demo.model.dto.MyUserDetail;
import com.example.demo.service.TransactionService;
import com.example.demo.service.VnpayService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

/**
 * ‚úÖ TransactionAPI ‚Äî Qu·∫£n l√Ω th√™m, s·ª≠a, x√≥a giao d·ªãch.
 * ƒê·∫£m b·∫£o an to√†n v·ªõi m·ªçi tr∆∞·ªùng h·ª£p (ch∆∞a login, session h·∫øt h·∫°n, v.v.)
 */
@RestController
@Transactional
@RequestMapping("/api/transaction")
public class TransactionAPI {

    @Autowired
    private TransactionService transactionService;
    
    @Autowired
    private VnpayService vnpayService;


    @Autowired
    private TransactionRepository transactionRepository;

    /**
     * üß© Th√™m ho·∫∑c c·∫≠p nh·∫≠t giao d·ªãch.
     */
    @PostMapping
    public ResponseDTO addOrUpdateTransaction(@RequestBody TransactionCreateRequest transactionCreateRequest) {
        ResponseDTO response = new ResponseDTO();

        // ‚úÖ L·∫•y th√¥ng tin nh√¢n vi√™n hi·ªán t·∫°i (t·ª´ SecurityContext)
        MyUserDetail principal = SecurityUtils.getPrincipal();

        // ‚ö†Ô∏è N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session h·∫øt h·∫°n
        if (principal == null || principal.getId() == null) {
            response.setMessage("‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            return response;
        }

        Long staffId = principal.getId();

        try {
            // G·ªçi service l∆∞u giao d·ªãch
            ResponseDTO result = transactionService.save(transactionCreateRequest, staffId);
            response.setMessage(result.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            response.setMessage("‚ùå L∆∞u giao d·ªãch th·∫•t b·∫°i: " + e.getMessage());
        }

        return response;
    }

    /**
     * üìã L·∫•y th√¥ng tin giao d·ªãch c≈© theo ID.
     */
    @GetMapping("/{id}")
    public ResponseDTO getOldTransaction(@PathVariable Long id) {
        ResponseDTO response = new ResponseDTO();

        try {
            response = transactionService.findById(id);
        } catch (Exception e) {
            e.printStackTrace();
            response.setMessage("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch c√≥ ID = " + id);
        }

        return response;
    }

    /**
     * üóëÔ∏è X√≥a giao d·ªãch theo ID.
     */
    @DeleteMapping("/{id}")
    public ResponseDTO deleteTransaction(@PathVariable Long id) {
        ResponseDTO response = new ResponseDTO();

        try {
            if (!transactionRepository.existsById(id)) {
                response.setMessage("‚ö†Ô∏è Giao d·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥.");
                return response;
            }

            transactionRepository.deleteById(id);
            response.setMessage("üóëÔ∏è X√≥a giao d·ªãch th√†nh c√¥ng!");
        } catch (Exception e) {
            e.printStackTrace();
            response.setMessage("‚ùå X√≥a giao d·ªãch th·∫•t b·∫°i: " + e.getMessage());
        }

        return response;
    }
    @PostMapping("/vnpay")
    public ResponseDTO createVnpayTransaction(@RequestBody TransactionCreateRequest request) {
        return vnpayService.createPayment(request);
    }

}
